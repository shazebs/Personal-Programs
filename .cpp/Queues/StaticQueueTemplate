#include <iostream>
#include <string>
// #include "Queue.h"
using namespace std;

// Stack Template
template <class T>
class Queue
{
private :
    T *queueArray;  // Points to the Queue Array
    int queueSize;  // The Queue Size
    int front;      // Subscript of the Queue Front
    int rear;       // Subscript of the Queue Rear
    int numItems;   // Number of Items in the queue

public :
    // Constructor.
    Queue(int);

    // Copy Constructor
    Queue(const Queue &);

    // Destructor
    ~Queue();

    // Queue Operations.
    void enqueue(T);
    void dequeue(T &);
    bool isEmpty() const;
    bool isFull() const;
    void clear();
};

//***************************************************************
// This Constructor Creates an Empty Queue of a Specified Size. *
//***************************************************************
template <class T>
Queue<T>::Queue(int s)
{
    queueArray = new T[s];
    queueSize = s;
    front = -1;
    rear = -1;
    numItems = 0;
}

//****************************************************************
// Copy Constructor                                              *
//****************************************************************
template <class T>
Queue<T>::Queue(const Queue &obj)
{
    // Allocate the Queue Array.
    queueArray = new int[obj.queueSize];

    // Copy the Other Object's Attributes.
    queueSize = obj.queueSize;
    front = obj.front;
    rear = obj.rear;
    numItems = obj.numItems;

    // Copy the Other Object's Queue Array.
    for (int x = 0; x < obj.queueSize; x++)
        queueArray[x] = obj.queueArray[x];
}


//************************************************
// Destructor                                    *
//************************************************
template <class T>
Queue<T>::~Queue() {
    delete [] queueArray;
}


//*************************************************************
// Function Enqueue Inserts a Value at the Rear of the Queue. *
//*************************************************************
template <class T>
void Queue<T>::enqueue(T data)
{
    if (isFull())
        cout << "The Queue is Full." << endl;
    else {
        // Calculate the New Rear Position
        rear = (rear + 1) % queueSize;
        // Insert New Item
        queueArray[rear] = data;
        // Update the Item Count
        numItems++;
    }
}


//****************************************************************
// Function Dequeue Removes the Value at the Front of the Queue  *
// and Copies t into num.                                        *
//****************************************************************
template <class T>
void Queue<T>::dequeue(T &data)
{
    if (isEmpty())
        cout << "The Queue is Empty." << endl;
    else
    {
        // Move Front
        front = (front + 1) % queueSize;
        // Retrieve the Front Item
        data = queueArray[front];
        // Update Item Count
        numItems--;
    }
}


//***************************************************************
// isEmpty Returns True if the Queue is Empty, Otherwise False. *
//***************************************************************
template <class T>
bool Queue<T>::isEmpty() const
{
    bool status;

    if (numItems)
        status = false;
    else
        status = true;

    return status;
}


//***************************************************************
// isFull Returns True if the Queue is Full, Otherwise False.   *
//***************************************************************
template <class T>
bool Queue<T>::isFull() const
{
    bool status;

    if (numItems < queueSize)
        status = false;
    else
        status = true;

    return status;
}


//*****************************************************************
// Clear Sets the Front and Rear Indices, and Sets numItems to 0. *
//*****************************************************************
template <class T>
void Queue<T>::clear()
{
    front = queueSize -1;
    rear = queueSize -1;
    numItems = 0;
}

// GLOBAL CONSTANTS
const int QUEUE_SIZE = 5;

int main()
{
    /*
    string name;

    // Create a Queue.
    Queue<string> queue(QUEUE_SIZE);

    // Enqueue some names.
    for (int i=0; i < QUEUE_SIZE; i++)
    {
        cout << "Enter a name: ";
        getline(cin, name);
        queue.enqueue(name);
    }

    // Dequeue the Names and Display Them.
    cout << "\nHere are the names you entered:\n";
    for (int i = 0; i < QUEUE_SIZE; i++)
    {
        queue.dequeue(name);
        cout << name << endl;
    } */

    // Enqueue another Value.
    Queue<string> queue(3);

    queue.enqueue("QueueTemplate_Gaddis");
    queue.enqueue("DynamicQueues_Gaddis");
    queue.enqueue("STL_Deque/QueueContainers_Gaddis");

    string name;

    // Display Queue Items.
    for (int i=0; i < 3; i++)
    {
        char enter;
        cout << i+1 << ". ";
        queue.dequeue(name);
        cout << name << endl;
        cout << "pop next on queue? (y/n): ";
        cin >> enter; cout << endl;
    }

    if (queue.isEmpty())
        cout << "The Queue is Completed." << endl;
    if (!queue.isFull())
        cout << "The Queue is Completed." << endl;

    cout << "\nEnd Program.";
    return 0;
}
