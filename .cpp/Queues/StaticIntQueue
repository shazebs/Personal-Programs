#include <iostream>
using namespace std;

// User Libraries
// #include "IntQueue.h"


// This is a Static Int Queue Example Program. 



class IntQueue
{
private :
    int *queueArray;    // Points to the Queue Array
    int queueSize;      // The Queue Size
    int front;          // Subscript of the Queue Front
    int rear;           // Subscript of the Queue Rear
    int numItems;       // Number of Items in the Queue

public :
    // Constructor
    IntQueue(int);

    // Copy Constructor
    IntQueue(const IntQueue &);

    // Destructor
    ~IntQueue();

    // Queue Operations.
    void enqueue(int);
    void dequeue(int &);
    bool isEmpty() const;
    bool isFull() const;
    void clear();

};


//***************************************************************
// This Constructor Creates an Empty Queue of a Specified Size. *
//***************************************************************

IntQueue::IntQueue(int s)
{
    queueArray = new int[s];
    queueSize = s;
    front = -1;
    rear = -1;
    numItems = 0;
}

//****************************************************************
// Copy Constructor                                              *
//****************************************************************

IntQueue::IntQueue(const IntQueue &obj)
{
    // Allocate the Queue Array.
    queueArray = new int[obj.queueSize];

    // Copy the Other Object's Attributes.
    queueSize = obj.queueSize;
    front = obj.front;
    rear = obj.rear;
    numItems = obj.numItems;

    // Copy the Other Object's Queue Array.
    for (int x = 0; x < obj.queueSize; x++)
        queueArray[x] = obj.queueArray[x];
}


//************************************************
// Destructor                                    *
//************************************************

IntQueue::~IntQueue() {
    delete [] queueArray;
}


//*************************************************************
// Function Enqueue Inserts a Value at the Rear of the Queue. *
//*************************************************************

void IntQueue::enqueue(int num)
{
    if (isFull())
        cout << "The Queue is Full." << endl;
    else {
        // Calculate the New Rear Position
        rear = (rear + 1) % queueSize;
        // Insert New Item
        queueArray[rear] = num;
        // Update the Item Count
        numItems++;
    }
}


//****************************************************************
// Function Dequeue Removes the Value at the Front of the Queue  *
// and Copies t into num.                                        *
//****************************************************************

void IntQueue::dequeue(int &num)
{
    if (isEmpty())
        cout << "The Queue is Empty." << endl;
    else
    {
        // Move Front
        front = (front + 1) % queueSize;
        // Retrieve the Front Item
        num = queueArray[front];
        // Update Item Count
        numItems--;
    }
}


//***************************************************************
// isEmpty Returns True if the Queue is Empty, Otherwise False. *
//***************************************************************

bool IntQueue::isEmpty() const
{
    bool status;

    if (numItems)
        status = false;
    else
        status = true;

    return status;
}


//***************************************************************
// isFull Returns True if the Queue is Full, Otherwise False.   *
//***************************************************************

bool IntQueue::isFull() const
{
    bool status;

    if (numItems < queueSize)
        status = false;
    else
        status = true;

    return status;
}


//*****************************************************************
// Clear Sets the Front and Rear Indices, and Sets numItems to 0. *
//*****************************************************************

void IntQueue::clear()
{
    front = queueSize -1;
    rear = queueSize -1;
    numItems = 0;
}



// START OF MAIN.
int main()
{
    const int MAX_VALUES = 5;   // Max Number of Values

    // Create an IntQueue to Hold the Values.
    IntQueue queue(MAX_VALUES);

    // Enqueue a Series of Items.
    cout << "Enqueuing " << MAX_VALUES << " items..." << endl;
    for (int x = 0; x < MAX_VALUES; x++)
        queue.enqueue(x);

    // Attempt to Enqueue Just One More Item.
    cout << "Now Attempting to Enqueue Again..." << endl;
    queue.enqueue(MAX_VALUES);

    // Dequeue and Retrieve All Items in the Queue.
    cout << "The Values in the Queue Were: " << endl;
    while (!queue.isEmpty())
    {
        int value;
        queue.dequeue(value);
        cout << value << endl;
    }

    // End.
    cout << "\nEnd Program.";
    return 0;
}
