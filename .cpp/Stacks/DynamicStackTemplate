// Author: Shazeb Suhail
// Date:   4/1/21
// Time:   2:03 AM

#include <iostream>
#include <string>
// #include "DynamicStack.h"
using namespace std;


// Stack template
template <class T>
class DynamicStack
{
private :
    // Structure for the stack nodes
    struct StackNode
    {
        T value;            // value in the node
        StackNode *next;    // ptr to the next node
    };
    StackNode *top;         // ptr to the stack top

public :
    // Constructor
    DynamicStack() { top = nullptr; }

    // Destructor
    ~DynamicStack();

    // Stack operations
    void push(T);
    void pop(T &);
    bool isEmpty();
};

//**********************************
// Destructor                      *
//**********************************
template <class T>
DynamicStack<T>::~DynamicStack()
{
    StackNode *nodePtr, *nextNode;

    // Position nodePtr at the top of the stack.
    nodePtr = top;

    // Traverse the list deleting each node.
    while (nodePtr != nullptr)
    {
        nextNode = nodePtr->next;
        delete nodePtr;
        nodePtr = nextNode;
    }
}

//************************************************
// Member function push pushes the argument onto *
// the stack.                                    *
//************************************************

template <class T>
void DynamicStack<T>::push(T item)
{
    StackNode *newNode = nullptr;   // ptr to a new node

    // Allocate a new node and store item there.
    newNode = new StackNode;
    newNode->value = item;

    // If there are no nodes in the list
    // make newNode the first node
    if (isEmpty())
    {
        top = newNode;
        newNode->next = nullptr;
    }
    else    // Otherwise, insert newNode before top.
    {
        newNode->next = top;
        top = newNode;
    }
}

//****************************************************
// Member function pop pops the value at the top     *
// of the stack off, and copies it into the variable *
// passed as an argument.                            *
//****************************************************
template <class T>
void DynamicStack<T>::pop(T &item)
{
    StackNode *temp = nullptr;  // temporary ptr

    // First make sure the stack isn't empty.
    if (isEmpty())
        cout << "The stack is empty.\n";
    else // pop value off top of stack
    {
        item = top->value;
        temp = top->next;
        delete top;
        top = temp;
    }
}

//****************************************************
// Member function isEmpty returns true if the stack *
// is empty, or false otherwise.                     *
//****************************************************
template <class T>
bool DynamicStack<T>::isEmpty()
{
    bool status;

    if (!top)
        status = true;
    else
        status = false;

    return status;
}



// Constants for the menu choices
const int PUSH_CHOICE = 1,
        POP_CHOICE = 2,
        QUIT_CHOICE = 3;




// Function Prototypes
void menu(int &);
void getStackSize(int &);
void pushItem(DynamicStack<string>&);
void popItem(DynamicStack<string>&);



// Start of Main. 
int main()
{
    // Local Variables
    int choice;     // To hold a menu choice

    // Create the stack.
    DynamicStack<string> stack;

    do
    {
        // Get the user's menu choice.
        menu(choice);

        // Perform the user's choice.
        if (choice != QUIT_CHOICE)
        {
            switch(choice)
            {
                case PUSH_CHOICE:
                    pushItem(stack);
                    break;
                case POP_CHOICE:
                    popItem(stack);
            }
        }
    } while (choice != QUIT_CHOICE);

    cout << "\nEnd Program.";
    return 0;
}

//**********************************************************
// The menu function displays the menu and gets the user's *
// choice, which is assigned to the reference parameter.   *
//**********************************************************
void menu(int &choice)
{
    // Display the menu and get the user's choice.
    cout << "\nWhat do you want to do?\n"
         << PUSH_CHOICE
         << " - Push an item onto the stack\n"
         << POP_CHOICE
         << " - Pop and item off the stack\n"
         << QUIT_CHOICE
         << " - Quit the program\n"
         << "Enter your choice: ";
    cin >> choice;

    // Validate the choice
    while (choice < PUSH_CHOICE || choice > QUIT_CHOICE)
    {
        cout << "Enter a valid choice: ";
        cin >> choice;
    }
}

//**********************************************
// The pushItem function gets an item from the *
// user and pushes it onto the stack.          *
//**********************************************
void pushItem(DynamicStack<string> &stack)
{
    string item;

    // Get an item to push onto the stack.
    cin.ignore();
    cout << "Enter an item: ";
    getline(cin, item);
    stack.push(item);
}

//***************************************************
// The popItem function pops an item from the stack *
//***************************************************
void popItem(DynamicStack<string> &stack)
{
    string item = "";

    // Pop the item.
    stack.pop(item);

    // Display the item
    if (item != "")
        cout << item << " was popped.\n";
}
