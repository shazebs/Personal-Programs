// Author: Shazeb Suhail
// Date:   3/31/21
// Time:   10:30 PM

#include <iostream>
// #include "IntStack.h"
using namespace std;

// This program teaches you how to make an integer type stack.  


class IntStack
{
private:
    int *stackArray;    // ptr to the stack array
    int stackSize;      // The stack size
    int top;            // Indicates the top of the stack

public:
    // Constructor
    IntStack(int);

    // Copy constructor
    IntStack(const IntStack &);

    // Destructor
    ~IntStack();

    // Stack operations
    void push(int);
    void pop(int &);
    bool isFull() const;
    bool isEmpty() const;
    int getStackSize() const;
};


//***********************************************
// Constructor                                  *
// This constructor creates an empty stack.     *
// The size parameter is the size of the stack. *
//***********************************************

IntStack::IntStack(int size)
{
    stackArray = new int[size];
    stackSize = size;
    top = -1;
}

//**********************************************
// Copy constructor                            *
//**********************************************

IntStack::IntStack(const IntStack &obj)
{
    // Create the stack array.
    if (obj.stackSize > 0)
        stackArray = new int[obj.stackSize]; // a new array is declared
    else
        stackArray = nullptr;

    // Copy the stackSize attribute.
    stackSize = obj.stackSize;

    // Copy the stack contents.
    for (int x = 0; x < stackSize; x++)
        stackArray[x] = obj.stackArray[x];

    // Set the top of the stack
    top = obj.top; // initialize top to -1
}

//**********************************************
// Destructor                                  *
//**********************************************

IntStack::~IntStack()
{
    delete []stackArray;
}

//**********************************************
// Member function push pushes the argument    *
// onto the stack.                             *
//**********************************************

void IntStack::push(int num)
{
    if (isFull())
        cout << "The stack is full.\n";
    else
    {
        top++; // increment starting from -1 by adding 1
        stackArray[top] = num; // the stackArray at a given index is initialized an int value
    }
}

//**********************************************
// Member function pop pops the value at the   *
// top of the stack off, and copies it into    *
// the variable passed as an argument.         *
//**********************************************

void IntStack::pop(int &num)
{
    if (isEmpty())
        cout << "The stack is empty.\n";
    else
    {
        num = stackArray[top];
        top--;
    }
}

//**********************************************
// Member function isFull returns true if the  *
// stack is empty, or false otherwise.         *
//**********************************************
bool IntStack::isFull() const
{
    bool status;

    if (top == stackSize - 1)
        status = true;
    else
        status = false;

    return status;
}

//****************************************************
// Member function isFull returns true if the stack  *
// is full, or false otherwise.                      *
//****************************************************

bool IntStack::isEmpty() const
{
    bool status;

    if (top == -1)
        status = true;
    else
        status = false;

    return status;
}

// return stackSize
int IntStack::getStackSize() const
{ return stackSize; }


// Start of Main Method. 
int main() {
    int catchVar; // To hold values popped off the stack

    // Define a stack object to hold 5 values.
    IntStack stack(5);

    // Push some values onto the stack
    stack.push(5);
    stack.push(10);
    stack.push(15);
    stack.push(20);
    stack.push(25);
    // stack.push(30); // stack is full at this point so an error statement will print

    // Pop the values of the stack
    // Print the values of the stack with a looping method.
    for (int x = 0; x < stack.getStackSize(); x++) {
        stack.pop(catchVar);
        cout << catchVar << endl;
    }

    // Check to see if you can get any more values from the stack
    stack.pop(catchVar);

    /*
    // Print the values of stack individually without a looping method.
    stack.pop(catchVar);
    cout << catchVar << endl;
    stack.pop(catchVar);
    cout << catchVar << endl;
    stack.pop(catchVar);
    cout << catchVar << endl;
    stack.pop(catchVar);
    cout << catchVar << endl;
    */

    cout << "\nEnd Program.";
    return 0;
}
