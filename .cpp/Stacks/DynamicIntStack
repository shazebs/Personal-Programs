#include <iostream>
// #include "DynIntStack.h"
using namespace std;


// This program demonstrates the dynamic stack.


class DynIntStack
{
private:
    // Structure for stack nodes
    struct StackNode
    {
        int value;          // value in the node
        StackNode *next;    // ptr to the next node
    };

    StackNode *top;         // ptr to the stack top

public:
    // Constructor
    DynIntStack()
        { top = nullptr; }

    // Destructor
    ~DynIntStack();

    // Stack operations
    void push(int);
    void pop(int &);
    bool isEmpty();
};


//************************************************
// Destructor                                    *
// This function deletes every node in the list. *
//************************************************

DynIntStack::~DynIntStack()
{
    StackNode *nodePtr = nullptr, *nextNode = nullptr;

    // Position nodePtr at the top of the stack.
    nodePtr = top;

    // Traverse the list deleting each node.
    while (nodePtr != nullptr)
    {
        nextNode = nodePtr->next;
        delete nodePtr;
        nodePtr = nextNode;
    }
}

//********************************************
// Member function push pushes the argument  *
// onto the stack.                           *
//********************************************

void DynIntStack::push(int num)
{
    StackNode *newNode = nullptr; // Pointer to a new node

    // Allocate a new node and store the num there.
    newNode = new StackNode;
    newNode->value = num;

    // If there are no nodes in the list
    // make newNode the first node.
    if (isEmpty())
    {
        top = newNode;
        newNode->next = nullptr;
    }
    else // Otherwise, insert newNode before top.
    {
        // newNode's ptr points to the top
        newNode->next = top;
        // the newNode is inserted before top
        top = newNode;
        // newNode is now at the top of the list.
    }
}

//****************************************************
// Member function pop pops the value at the top     *
// of the stack off, and copies it into the variable *
// passed as an argument.                            *
//****************************************************

void DynIntStack::pop(int &num)
{
    StackNode *temp = nullptr;  // temporary ptr

    // First make sure the stack isn't empty.
    if (isEmpty())
        cout << "The stack is empty.\n";
    else // pop value off top of stack
    {
        num = top->value;
        temp = top->next;
        delete top;
        top = temp;
    }
}

//****************************************************
// Member function isEmpty returns true if the stack *
// is empty, or false otherwise.                     *
//****************************************************

bool DynIntStack::isEmpty()
{
    bool status;

    if (!top)
        status = true;
    else
        status = false;

    return status;
}


// Start of Main. 
int main()
{
    // Local Variables
    int catchVar;   // To hold values popped off the stack

    // Create a class DynIntStack object.
    DynIntStack stack;

    // Try to pop a value of the stack.
    stack.pop(catchVar);
    cout << endl;

     // Push some values onto the stack.
     cout << "Pushing 5...\n";
     stack.push(5);
     cout << "Pushing 10...\n";
     stack.push(10);
    cout << "Pushing 15...\n";
    stack.push(105);

    // Pop the values off the stack and display them.
    cout << "\nPopping...\n";
    while (stack.isEmpty() != 1)
    {
        stack.pop(catchVar);
        cout << catchVar << endl;
    }

    // Try to pop another value off the stack.
    cout << "\nAttempting to pop again...";
    stack.pop(catchVar);

    // End.
    cout << "\nEnd Program.";
    return 0;
}
