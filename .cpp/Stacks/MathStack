#include <iostream>
// #include "MathStack.h"
using namespace std;



class IntStack
{
private:
    int *stackArray;    // ptr to the stack array
    int stackSize;      // The stack size
    int top;            // Indicates the top of the stack

public:
    // Constructor
    IntStack(int);

    // Copy constructor
    IntStack(const IntStack &);

    // Destructor
    ~IntStack();

    // Stack operations
    void push(int);
    void pop(int &);
    bool isFull() const;
    bool isEmpty() const;
    int getStackSize() const;
};




//***********************************************
// Constructor                                  *
// This constructor creates an empty stack.     *
// The size parameter is the size of the stack. *
//***********************************************

IntStack::IntStack(int size)
{
    stackArray = new int[size];
    stackSize = size;
    top = -1;
}

//**********************************************
// Copy constructor                            *
//**********************************************

IntStack::IntStack(const IntStack &obj)
{
    // Create the stack array.
    if (obj.stackSize > 0)
        stackArray = new int[obj.stackSize]; // a new array is declared
    else
        stackArray = nullptr;

    // Copy the stackSize attribute.
    stackSize = obj.stackSize;

    // Copy the stack contents.
    for (int x = 0; x < stackSize; x++)
        stackArray[x] = obj.stackArray[x];

    // Set the top of the stack
    top = obj.top; // initialize top to -1
}

//**********************************************
// Destructor                                  *
//**********************************************

IntStack::~IntStack()
{
    delete []stackArray;
}

//**********************************************
// Member function push pushes the argument    *
// onto the stack.                             *
//**********************************************

void IntStack::push(int num)
{
    if (isFull())
        cout << "The stack is full.\n";
    else
    {
        top++; // increment starting from -1 by adding 1
        stackArray[top] = num; // the stackArray at a given index is initialized an int value
    }
}

//**********************************************
// Member function pop pops the value at the   *
// top of the stack off, and copies it into    *
// the variable passed as an argument.         *
//**********************************************

void IntStack::pop(int &num)
{
    if (isEmpty())
        cout << "The stack is empty.\n";
    else
    {
        num = stackArray[top];
        top--;
    }
}

//**********************************************
// Member function isFull returns true if the  *
// stack is empty, or false otherwise.         *
//**********************************************
bool IntStack::isFull() const
{
    bool status;

    if (top == stackSize - 1)
        status = true;
    else
        status = false;

    return status;
}

//****************************************************
// Member function isFull returns true if the stack  *
// is full, or false otherwise.                      *
//****************************************************

bool IntStack::isEmpty() const
{
    bool status;

    if (top == -1)
        status = true;
    else
        status = false;

    return status;
}

// return stackSize
int IntStack::getStackSize() const
{ return stackSize; }





class MathStack : public IntStack // class MathStack extends class IntStack ?
{
public :
    // Constructor
    MathStack(int s) : IntStack(s) {}

    // MathStack operations
    void add();
    void sub();
};





//***********************************************
// Member function add. Add pops the first two  *
// values off the stack and adds them.          *
// The sum is pushed onto the stack.            *
//***********************************************

void MathStack::add()
{
    // Function variables
    int num, sum;

    // Pop the first two values off the stack.
    pop(sum);
    pop(num);

    // Add the two values, store in sum.
    sum += num;

    // Push sum back onto the stack.
    push(sum);
}

//******************************************************
// Member function sub. Sub pops the first two values  *
// off the stack. The second value is subtracted from  *
// the first value. The difference is pushed onto      *
// the stack.                                          *
//******************************************************

void MathStack::sub()
{
    int num, diff;

    // Pop the first two values off the stack.
    pop(diff);
    pop(num);

    // Subtract num from diff
    diff -= num;

    // Push diff back onto the stack
    push(diff);
}



int main()
{
    // Local Variables
    int catchVar; // to hold values popped off the stack.

    // Create a MathStack object
    MathStack stack(5);

    // Push 3 and 6 onto the stack.
    cout << "Pushing 3 onto stack...\n";
    stack.push(3);
    cout << "Pushing 6 onto stack...\n";
    stack.push(6);

    // Add the two values.
    stack.add();

    // Pop the sum off the stack and display it.
    cout << "The sum is ";
    stack.pop(catchVar);
    cout << catchVar << "\n\n";

    // Push 7 and 10 onto the stack.
    cout << "Pushing 7 onto the stack..."
            "\n";
    stack.push(7);
    cout << "Pushing 10 onto the stack....\n";
    stack.push(10);

    // Subtract 7 from 10
    stack.sub();

    // Pop the difference off the stack and display it.
    cout << "The difference is ";
    stack.pop(catchVar);
    cout << catchVar << "\n\n";

    // See if there are any more stack values.
    if (stack.isEmpty() == 1)
        cout << "The stack is empty.\n";
    else
        cout << "The stack is not empty.\n";

    // End.
    cout << "\nEnd Program";
    return 0;
}
